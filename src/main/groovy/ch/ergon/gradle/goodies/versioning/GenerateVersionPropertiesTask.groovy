/*
* Copyright (c) Ergon Informatik AG, Switzerland
*/
package ch.ergon.gradle.goodies.versioning

import org.gradle.api.DefaultTask
import org.gradle.api.Project
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.OutputFile
import org.gradle.api.tasks.TaskAction

class GenerateVersionPropertiesTask extends DefaultTask {

	@OutputFile
	File versionPropertiesFile = new File("${project.buildDir}/versioning-data/", "version.properties")

	@TaskAction
	def generateVersionProperties() {
		generateVersionPropertiesFile()
	}

	/**
	* Generate a file that describes the project version including tags and hashes and when
	* it was built where, on which operating system with what jdk.
	**/
	def generateVersionPropertiesFile() {
		def props = getVersionProperties()

		def content = """
		# File generated by build.
		build.host=${props.hostInfo}
		build.java.version=${props.javaVersion}
		build.java.vm.vendor=${props.javaVmVendor}
		build.artifact-id=${props.artifact_id}
		build.version=${props.longVersion}
		""".stripIndent()

		new File(versionPropertiesFile.getParent()).mkdirs()
		versionPropertiesFile.text = content
	}

	/*
	* Properties that should be used to determine up-to-dateness.
	*/
	@Input
	def getVersionProperties() {
		def props = [
			longVersion : figureOutLongVersion(project),
			hostInfo    : "${System.getProperty("os.name")} - ${System.getProperty("os.arch")} - ${System.getProperty("os.version")}",
			javaVersion : System.getProperty("java.version"),
			javaVmVendor: System.getProperty("java.vm.vendor"),
			artifact_id : project.name
		]
		project.logger.info("version properties input props: $props")
		return props
	}

	static def figureOutLongVersion(Project project) {
		return project.versioning.describeLongVersion()
	}
}
